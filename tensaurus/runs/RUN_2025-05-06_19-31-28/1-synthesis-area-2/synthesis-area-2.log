
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 16.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /Users/justinmalloy/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/Users/justinmalloy/My Drive (jamalloy@mit.edu)/(S6) Spring 2025/6.5930 Hardware Architecture for Deep Learning/rtl-goes-hard/tensaurus/runs/RUN_2025-05-06_19-31-28/1-synthesis-area-2/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: /Users/justinmalloy/My Drive (jamalloy@mit.edu)/(S6) Spring 2025/6.5930 Hardware Architecture for Deep Learning/rtl-goes-hard/tensaurus/tensaurus.sv
Parsing SystemVerilog input from `/Users/justinmalloy/My Drive (jamalloy@mit.edu)/(S6) Spring 2025/6.5930 Hardware Architecture for Deep Learning/rtl-goes-hard/tensaurus/tensaurus.sv' to AST representation.
Storing AST representation for module `$abstract\tensaurus'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\tensaurus'.
Generating RTLIL representation for module `\tensaurus'.

4.1. Analyzing design hierarchy..
Top module:  \tensaurus

4.2. Analyzing design hierarchy..
Top module:  \tensaurus
Removing unused module `$abstract\tensaurus'.
Removed 1 unused modules.
Renaming module tensaurus to tensaurus.

5. Generating Graphviz representation of design.
Writing dot description to `/Users/justinmalloy/My Drive (jamalloy@mit.edu)/(S6) Spring 2025/6.5930 Hardware Architecture for Deep Learning/rtl-goes-hard/tensaurus/runs/RUN_2025-05-06_19-31-28/1-synthesis-area-2/hierarchy.dot'.
Dumping module tensaurus to page 1.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \tensaurus

7.2. Analyzing design hierarchy..
Top module:  \tensaurus
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1 in module tensaurus.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 5 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:0$3'.
Creating decoders for process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.
     1/5: $0\temp_valid[0:0]
     2/5: $0\nnz_addr_temp[9:0]
     3/5: $0\k_index_temp[7:0]
     4/5: $0\j_index_temp[7:0]
     5/5: $0\i_index_temp[7:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\tensaurus.\i_index' from process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:0$3'.
No latch inferred for signal `\tensaurus.\j_index' from process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:0$3'.
No latch inferred for signal `\tensaurus.\k_index' from process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:0$3'.
No latch inferred for signal `\tensaurus.\nnz_addr_out' from process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:0$3'.
No latch inferred for signal `\tensaurus.\out_data_valid' from process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:0$3'.

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\tensaurus.\i_index_temp' using process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.
  created $adff cell `$procdff$21' with positive edge clock and positive level reset.
Creating register for signal `\tensaurus.\j_index_temp' using process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.
  created $adff cell `$procdff$24' with positive edge clock and positive level reset.
Creating register for signal `\tensaurus.\k_index_temp' using process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.
  created $adff cell `$procdff$27' with positive edge clock and positive level reset.
Creating register for signal `\tensaurus.\nnz_addr_temp' using process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.
  created $adff cell `$procdff$30' with positive edge clock and positive level reset.
Creating register for signal `\tensaurus.\temp_valid' using process `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.
  created $adff cell `$procdff$33' with positive edge clock and positive level reset.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:0$3'.
Found and cleaned up 1 empty switch in `\tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.
Removing empty process `tensaurus.$proc$/Users/justinmalloy/My$20Drive$20(jamalloy@mit.edu)/(S6)$20Spring$202025/6.5930$20Hardware$20Architecture$20for$20Deep$20Learning/rtl-goes-hard/tensaurus/tensaurus.sv:25$1'.
Cleaned up 1 empty switch.

19. Executing CHECK pass (checking for obvious problems).
Checking module tensaurus...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.
<suppressed ~6 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tensaurus..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tensaurus.
Performed a total of 0 changes.

28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

29. Executing OPT_DFF pass (perform DFF optimizations).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

31. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

32. Executing FSM pass (extract and optimize FSM).

32.1. Executing FSM_DETECT pass (finding FSMs in design).

32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

33. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tensaurus..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tensaurus.
Performed a total of 0 changes.

37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

38. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$30 ($adff) from module tensaurus (D = \nnz_addr, Q = \nnz_addr_temp).
Adding EN signal on $procdff$27 ($adff) from module tensaurus (D = \k, Q = \k_index_temp).
Adding EN signal on $procdff$24 ($adff) from module tensaurus (D = \i_or_j, Q = \j_index_temp).
Adding EN signal on $procdff$21 ($adff) from module tensaurus (D = \i_or_j, Q = \i_index_temp).

39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

40. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

41. Rerunning OPT passes. (Maybe there is more to doâ€¦)

42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tensaurus..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tensaurus.
Performed a total of 0 changes.

44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

45. Executing OPT_DFF pass (perform DFF optimizations).

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

47. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

48. Executing WREDUCE pass (reducing word size of cells).

49. Executing PEEPOPT pass (run peephole optimizers).

50. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

51. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module tensaurus:
  created 0 $alu and 0 $macc cells.

52. Executing SHARE pass (SAT-based resource sharing).

53. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

54. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

55. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tensaurus..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

56. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tensaurus.
Performed a total of 0 changes.

57. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

58. Executing OPT_DFF pass (perform DFF optimizations).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

60. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

61. Executing MEMORY pass.

61.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

61.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

61.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

61.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

61.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

61.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

61.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

61.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

61.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

61.10. Executing MEMORY_COLLECT pass (generating $mem cells).

62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

63. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.
<suppressed ~1 debug messages>

64. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

65. Executing OPT_DFF pass (perform DFF optimizations).

66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

67. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

68. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

70. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tensaurus..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

71. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tensaurus.
Performed a total of 0 changes.

72. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

73. Executing OPT_SHARE pass.

74. Executing OPT_DFF pass (perform DFF optimizations).

75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

76. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

77. Executing TECHMAP pass (map to technology primitives).

77.1. Executing Verilog-2005 frontend: /nix/store/zxzmb2hdyjahy1lq6yglcx6sxy6zrddi-yosys-with-plugins/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/zxzmb2hdyjahy1lq6yglcx6sxy6zrddi-yosys-with-plugins/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

77.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~80 debug messages>

78. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.
<suppressed ~35 debug messages>

79. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

80. Executing OPT_DFF pass (perform DFF optimizations).

81. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

82. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

84. Executing OPT_DFF pass (perform DFF optimizations).

85. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

86. Executing ABC pass (technology mapping using ABC).

86.1. Extracting gate netlist of module `\tensaurus' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 19 wires to a netlist network with 10 inputs and 1 outputs.

86.1.1. Executing ABC.
Running ABC command: "/nix/store/0lcxf72vg49zlzrv7vlsnv0ibna09hwx-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

86.1.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        9
ABC RESULTS:        internal signals:        8
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        1
Removing temp directory.

87. Executing OPT pass (performing simple optimizations).

87.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

87.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

87.3. Executing OPT_DFF pass (perform DFF optimizations).

87.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

87.5. Finished fast OPT passes.

88. Executing HIERARCHY pass (managing design hierarchy).

88.1. Analyzing design hierarchy..
Top module:  \tensaurus

88.2. Analyzing design hierarchy..
Top module:  \tensaurus
Removed 0 unused modules.

89. Executing CHECK pass (checking for obvious problems).
Checking module tensaurus...
Found and reported 0 problems.

90. Printing statistics.

=== tensaurus ===

   Number of wires:                 24
   Number of wire bits:            107
   Number of public wires:          15
   Number of public wire bits:      98
   Number of ports:                 10
   Number of port bits:             63
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_DFFE_PP0N_                    8
     $_DFFE_PP0P_                   26
     $_DFF_PP0_                      1
     $_OR_                           9

91. Generating Graphviz representation of design.
Writing dot description to `/Users/justinmalloy/My Drive (jamalloy@mit.edu)/(S6) Spring 2025/6.5930 Hardware Architecture for Deep Learning/rtl-goes-hard/tensaurus/runs/RUN_2025-05-06_19-31-28/1-synthesis-area-2/primitive_techmap.dot'.
Dumping module tensaurus to page 1.

92. Executing OPT pass (performing simple optimizations).

92.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

92.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

92.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tensaurus..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

92.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tensaurus.
Performed a total of 0 changes.

92.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tensaurus'.
Removed a total of 0 cells.

92.6. Executing OPT_DFF pass (perform DFF optimizations).

92.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..

92.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module tensaurus.

92.9. Finished OPT passes. (There is nothing left to do.)

93. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tensaurus..
Removed 0 unused cells and 5 unused wires.
<suppressed ~5 debug messages>
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 16.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /Users/justinmalloy/My Drive (jamalloy@mit.edu)/(S6) Spring 2025/6.5930 Hardware Architecture for Deep Learning/rtl-goes-hard/tensaurus/runs/RUN_2025-05-06_19-31-28/tmp/c598943c85404c17bd3ce512adf987f6.lib ",
   "modules": {
      "\\tensaurus": {
         "num_wires":         19,
         "num_wire_bits":     72,
         "num_pub_wires":     10,
         "num_pub_wire_bits": 63,
         "num_ports":         10,
         "num_port_bits":     63,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         44,
         "num_cells_by_type": {
            "$_DFFE_PP0N_": 8,
            "$_DFFE_PP0P_": 26,
            "$_DFF_PP0_": 1,
            "$_OR_": 9
         }
      }
   },
      "design": {
         "num_wires":         19,
         "num_wire_bits":     72,
         "num_pub_wires":     10,
         "num_pub_wire_bits": 63,
         "num_ports":         10,
         "num_port_bits":     63,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         44,
         "num_cells_by_type": {
            "$_DFFE_PP0N_": 8,
            "$_DFFE_PP0P_": 26,
            "$_DFF_PP0_": 1,
            "$_OR_": 9
         }
      }
}

94. Printing statistics.

=== tensaurus ===

   Number of wires:                 19
   Number of wire bits:             72
   Number of public wires:          10
   Number of public wire bits:      63
   Number of ports:                 10
   Number of port bits:             63
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_DFFE_PP0N_                    8
     $_DFFE_PP0P_                   26
     $_DFF_PP0_                      1
     $_OR_                           9

   Area for cell type $_OR_ is unknown!
   Area for cell type $_DFF_PP0_ is unknown!
   Area for cell type $_DFFE_PP0N_ is unknown!
   Area for cell type $_DFFE_PP0P_ is unknown!

[INFO] Applying tri-state buffer mapping from '/Users/justinmalloy/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

95. Executing TECHMAP pass (map to technology primitives).

95.1. Executing Verilog-2005 frontend: /Users/justinmalloy/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/Users/justinmalloy/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

95.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

96. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/Users/justinmalloy/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

97. Executing TECHMAP pass (map to technology primitives).

97.1. Executing Verilog-2005 frontend: /Users/justinmalloy/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/Users/justinmalloy/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

97.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

98. Executing SIMPLEMAP pass (map simple cells to gate primitives).

99. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

99.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\tensaurus':
  mapped 35 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 16.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /Users/justinmalloy/My Drive (jamalloy@mit.edu)/(S6) Spring 2025/6.5930 Hardware Architecture for Deep Learning/rtl-goes-hard/tensaurus/runs/RUN_2025-05-06_19-31-28/tmp/c598943c85404c17bd3ce512adf987f6.lib ",
   "modules": {
      "\\tensaurus": {
         "num_wires":         88,
         "num_wire_bits":     141,
         "num_pub_wires":     10,
         "num_pub_wire_bits": 63,
         "num_ports":         10,
         "num_port_bits":     63,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         113,
         "area":              919.632000,
         "num_cells_by_type": {
            "$_MUX_": 34,
            "$_NOT_": 35,
            "$_OR_": 9,
            "sky130_fd_sc_hd__dfrtp_2": 35
         }
      }
   },
      "design": {
         "num_wires":         88,
         "num_wire_bits":     141,
         "num_pub_wires":     10,
         "num_pub_wire_bits": 63,
         "num_ports":         10,
         "num_port_bits":     63,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         113,
         "area":              919.632000,
         "num_cells_by_type": {
            "$_MUX_": 34,
            "$_NOT_": 35,
            "$_OR_": 9,
            "sky130_fd_sc_hd__dfrtp_2": 35
         }
      }
}

100. Printing statistics.

=== tensaurus ===

   Number of wires:                 88
   Number of wire bits:            141
   Number of public wires:          10
   Number of public wire bits:      63
   Number of ports:                 10
   Number of port bits:             63
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                113
     $_MUX_                         34
     $_NOT_                         35
     $_OR_                           9
     sky130_fd_sc_hd__dfrtp_2       35

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_MUX_ is unknown!

   Chip area for module '\tensaurus': 919.632000
     of which used for sequential elements: 919.632000 (100.00%)

[INFO] Using generated ABC script '/Users/justinmalloy/My Drive (jamalloy@mit.edu)/(S6) Spring 2025/6.5930 Hardware Architecture for Deep Learning/rtl-goes-hard/tensaurus/runs/RUN_2025-05-06_19-31-28/1-synthesis-area-2/AREA_2.abc'â€¦

101. Executing ABC pass (technology mapping using ABC).

101.1. Extracting gate netlist of module `\tensaurus' to `/tmp/yosys-abc-8qld4z/input.blif'..
Extracted 78 gates and 139 wires to a netlist network with 61 inputs and 70 outputs.

101.1.1. Executing ABC.
ERROR: Can't open ABC output file `/tmp/yosys-abc-8qld4z/output.blif'.
